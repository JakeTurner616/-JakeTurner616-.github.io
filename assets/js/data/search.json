[ { "title": "js13k 2024 Post-Mortem - html/css/js Game Jam", "url": "/serverboi.org/posts/js13k-Post-Mortem/", "categories": "", "tags": "", "date": "2024-09-17 06:30:00 +0000", "snippet": "JS13k 2024 Post-MortemIntroductionFirst off I would like to express how deeply I appreciate the opportunity to participate in the JS13k 2024 competition. This event was a lot of fun to participate ...", "content": "JS13k 2024 Post-MortemIntroductionFirst off I would like to express how deeply I appreciate the opportunity to participate in the JS13k 2024 competition. This event was a lot of fun to participate in. I found the process of creating my game alongside so many very, very talented programmers to be such a profoundly important learning experience.My Game Overview: “Z0MB13”My game entry can be played on js13kgames.com.The concept for my JS13k submission was a top-down arcade-style arena shooter, featuring an unending sequence of zombies that increase in speed and difficulty. The core objective was to design a game that not only engages the user with its escalating challenge but also diversifies the gameplay with an array of interesting zombie types. Above all, I wanted to make something that I would’ve played back in the days of flash-based games.Technologies UsedI utilized a fairly simple set of development tools and libraries for adhering to the competition’s size limit: Game Engine: Employed LittleJS for its robust capabilities and lightweight build size. Modules: Leveraged ES6 Modules for efficient script organization and tree-shaking. Build Tools: Integrated Webpack, Terser, Closure Compiler, UglifyJS, and Roadroller to streamline and minimize the final build. Joystick.js: An open source html joystick that I was able to heavily adjust to minify and to meet the two stick at a time requirement for touch devices.These technologies were used to build to the 13KB limitation.Challenges EncounteredThe development journey was marked by several significant challenges: Mobile Compatibility: The decision to implement mobile compatibility introduced complexities in the final stages of development, necessitating the addition of touch controls and a mobile-adaptive interface. Game Difficulty Balance: As the primary playtester, calibrating the game’s difficulty posed a considerable challenge. The goal was to strike a delicate balance between difficulty and enjoyment, a task that required meticulous adjustment and reevaluation to ensure the game remained engaging and accessible.AchievementsI am particularly proud of the modular zombie system developed for the game. This system allowed for the efficient introduction of diverse zombie types, somewhat enhancing the game’s depth and replayability. By extending each zombie type from a foundational class, I significantly streamlined the development process, reducing redundancy and fostering a more agile development environment.Lessons Learned Build Optimization: I gained invaluable insights into the intricate process of minimizing an HTML-based game, utilizing a combination of advanced tools to refine and compress the game’s assets effectively. Compression Techniques: The exploration of various zipping techniques to further reduce the game’s size taught me the critical importance of each byte in such a constrained development environment.Future Directions Early Platform Consideration: Future projects will benefit from an earlier determination of targeted platforms, incorporating necessary features such as touch controls from the project’s inception. Expanded Playtesting: Engaging a broader array of playtesters early in the development process will be crucial in more accurately assessing and adjusting the game’s difficulty curve.ConclusionAfter all is said and done, JS13k was about embracing the constraints of 13KB, learning from every hurdle, and pushing the boundaries with such limited resources. “Z0MB13” was a project that challenged me to think critically, and optimize efficiently. From tackling mobile support to fine-tuning game mechanics, every step was a lesson in balancing ideas and ambition with reality. As I move forward, this experience will for sure guide me to be more intentional regarding the technical intricacies of game/web development. For now, I’m leaving this competition with a great sense of accomplishment and excitement, and I’m highly grateful for the experience. Thank you for putting this game jam together Andrzej!" }, { "title": "Map Pixel - An r/place Fullstack Clone", "url": "/serverboi.org/posts/map-pixel-app/", "categories": "", "tags": "", "date": "2024-07-05 15:30:00 +0000", "snippet": "OverviewClick here to try the live demo.map-pixel-app is a simple fullstack clone of the popular r/place, scaled to a giant world size. This interactive application allows users to place colored pi...", "content": "OverviewClick here to try the live demo.map-pixel-app is a simple fullstack clone of the popular r/place, scaled to a giant world size. This interactive application allows users to place colored pixels on a massive world map, creating a collaborative digital artwork. Built from scratch using React, Map Pixel aims to offer a seamless and engaging user experience, supporting real-time updates and user interactions.ScreenshotsWorld map interface.Pixel placement interface.Features Interactive World Map: Users can zoom in and out, and navigate the world map to place pixels. Real-Time Updates: See pixel placements from other users in real-time. User Authentication: Secure user login and registration to track individual contributions. Statistics Page: View global and personal statistics of pixel placements. Bot Protection: Integrated hCaptcha to prevent automated pixel placements. Responsive Design: Optimized for both desktop and mobile devices.UsageNavigate the map and click to place a pixel. Make sure you are logged in to track your contributions. Zoom and Navigate: Use your mouse or touch gestures to zoom in/out and navigate the world map. Select a Pixel: Click on a location to place your pixel. Authentication: Ensure you are logged in to track and view your contributions.DevelopmentInstallationPrerequisites Node.js npm or yarn Python Flask Docker (for backend deployment) Gunicorn (for running the Flask application) NGINX (for reverse proxy)StepsTesting Clone the Repository git clone https://github.com/JakeTurner616/map-pixel-appcd map-pixel-app Install Frontend Dependencies npm install# oryarn install Build and Deploy for Testing npm run start# start the development server Install Backend Dependencies # Clone backend repogit clone https://github.com/JakeTurner616/map-pixel-backendcd map-pixel-backend/ # Create a virtual environmentpython -m venv venv # Activate the virtual environment# On Windows:venv\\Scripts\\activate# On macOS/Linux:source venv/bin/activate # Install dependenciespip install -r requirements.txt Run the Backend Development Server # start the Flask development serverpython backend.py Deployment Build and Deploy the Frontend # build the production assetsnpm run build Build and Deploy the Backend # Make sure to backup the pixels.db database to the /map-pixel-app directory between container rebuilds to prevent data loss!docker build -t map-pixel-app .docker run -p 8000:8000 map-pixel-app LicenseThis project is licensed under the GNU GPL 3.0 License. See the LICENSE file for details. Edit this page’s markdown on GitHub." }, { "title": "React mp3 downloader for Plexamp", "url": "/serverboi.org/posts/mp3-react-app/", "categories": "", "tags": "", "date": "2024-06-15 17:40:00 +0000", "snippet": "OverviewClick here to try the live demo.mp3-react-app is a simple React application that allows users to download MP3 files from YouTube links. The application also supports tagging the downloaded ...", "content": "OverviewClick here to try the live demo.mp3-react-app is a simple React application that allows users to download MP3 files from YouTube links. The application also supports tagging the downloaded MP3 files with metadata (artist, album, track name) and organizing the files into a Plex-friendly structure. Additionally, it can acquire and download lyrics from a provided Genius URL.Features Download MP3 files from YouTube links. Tag MP3 files with metadata: artist name, album name, track name. Organize downloaded files in a Plex-friendly structure. Optional lyrics acquisition and downloading from Genius.UsageEnter the YouTube link: Paste the URL of the YouTube video you want to download. Artist Name Album Name Track Name Optional Lyrics: Enter the Genius URL for the lyrics if available. Download: Click the “Download” button to start the process.Output Structure:The downloaded MP3 files will be organized in the following Plex-friendly structure:Artist Name└── Album Name ├── Track Name.mp3 ├── Track Name.txt (optional) └── Track Name.webp (YouTube thumbnail for album cover)DevelopmentInstallationPrerequisites Node.js npm or yarn Python (for the backend) Flask (for the backend) ffmpeg (for YouTube to MP3 conversion) Docker (Optional but recommended for gunicorn deployment)StepsTesting Clone the Repository git clone https://github.com/JakeTurner616/mp3-react-appcd mp3-react-app Install Frontend Dependencies npm install# oryarn install Build and deploy for testing npm run start# start the dev server Install Backend for testing # Create a virtual environment python -m venv venv # Activate the virtual environment # On Windows: venv\\Scripts\\activate # On macOS/Linux: source venv/bin/activate # Install dependencies from requirements.txt pip install -r requirements.txt Run the Backend dev server for testing (don’t forward or proxy this!) python backend.py (requires ffmpeg)# start the flask dev server manually Deployment Build and deploy static site with backend domain set in .env npm run build# build the production assets Install Backend for deployment docker build -t mp3-react-app .docker run -p 50616:50616 mp3-react-app# now we can forward and/or proxy the API backend LicenseThis project is licensed under the GNU GPL 3.0 License. See the LICENSE file for details. Edit this page’s markdown on github." }, { "title": "DiscordTorrentManager - Torrent stuff with your friends", "url": "/serverboi.org/posts/DiscordTorrentManager/", "categories": "", "tags": "", "date": "2024-06-12 07:50:00 +0000", "snippet": "DiscordTorrentManager is a Torrent seeker and manager that you can use with your friends. The initial version of this project faced significant issues with maintainability and scope. This is the s...", "content": "DiscordTorrentManager is a Torrent seeker and manager that you can use with your friends. The initial version of this project faced significant issues with maintainability and scope. This is the second iteration and aims to have a clearer scope and improved testability so it can be easily maintained and improved.This program consists of a bot scirpt and a search wrapper. these two parts work together to find torrents and add magnets to qbittorrent.Installation Clone the repository: git clone https://github.com/JakeTurner616/DiscordTorrentManager cd DiscordTorrentManager Create a virtual environment: python -m venv venv Activate the virtual environment: On Windows: venv\\Scripts\\activate On MacOS and Linux: source venv/bin/activate Install the required packages: pip install -r requirements.txt Run the bot: python bot.py If you run into this error: ImportError: cannot import name 'Option' from 'discord', just run these commands: pip uninstall discord -y pip uninstall py-cord -y pip install discord pip install py-cord pip uninstall discord -y qBittorrent Setup Open qBittorrent and go to Tools -&gt; Options. Navigate to the Web UI section under the Web UI tab. Check the Enable the Web User Interface (Remote control) box. Set a network interface to bind the webui in the IP Address text box. Set a username and password for the Web UI. Create torrent categories in qBittorrent to associate the downloaded content with the folders they should be saved to (for example: movies &gt; Z://some/location/movies, tv &gt; Z://some/location/tv). These are to be used with /magnet &lt;magnet_link&gt; &lt;category&gt; The category save paths could be set somwhere that has access to a media player like plex, jellyfin, or anything really. Discord Bot Setup Go to the Discord Developer Portal and create a new bot application. Create and copy the bot token. Invite the bot to your server using the OAuth2 URL Generator under the OAuth2 tab. Make sure to give the bot the necessary permissions for slash commands, reactions, and text. ConfigurationEdit the config.ini file to include your specific environment settings for connecting to your discord bot and qBittorrent instance:[Bot]# change to your bot tokentoken = YOUR_DISCORD_BOT_TOKEN# change to your server idguild_id = YOUR_DISCORD_GUILD_ID[qbit]# change to your qBittorrent host and port: http://host_ip:port host = http://10.0.0.123:8080# qBittorrent WebUI login credentialsuser = YOUR_QBITTORRENT_USERNAMEpass = YOUR_QBITTORRENT_PASSWORDThe bot can then be started by running the bot.py script.Command UsageHere are the commands included with the DiscordTorrentManager bot: Add a Magnet Link: /magnet &lt;magnet&gt; &lt;category&gt; This command adds a new torrent to qBittorrent using the provided magnet link and associates it with the specified category. Search for Torrents: /search &lt;title&gt; This command searches for torrents based on the provided title. The bot will list the results, and the user can select a result to automatically download it to the ‘movie’ category. Assumes the ‘movie’ category exists. Edit this page’s markdown on github." }, { "title": "Pygame Lua Integration: Simplifying Game Development", "url": "/serverboi.org/posts/pygame-lua-bindings/", "categories": "", "tags": "", "date": "2024-05-30 06:30:00 +0000", "snippet": "This project, pygame lua bindings, aims to streamline the process of simple Pygame development tasks through the use of the Lua scripting language while utilizing the robust feature set of Pygame w...", "content": "This project, pygame lua bindings, aims to streamline the process of simple Pygame development tasks through the use of the Lua scripting language while utilizing the robust feature set of Pygame with a custom main loop and event handler system. The idea is to create a framework for fast Pygame prototyping that could possibly even work as an embedded application. Lua (using lua bindings):clear_canvas()draw_text(50, 50, \"Hello Pygame from lua!\", \"Arial\", 30, 'red') Compare to vanilla pygame:import pygamepygame.init()screen = pygame.display.set_mode((800, 600))font = pygame.font.SysFont('Arial', 30)red = (124, 0, 0)green = (0, 255, 0)running = Truewhile running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False screen.fill((0, 0, 0)) screen.blit(font.render('Hello Pygame from python!', True, red), (50, 50)) pygame.display.flip()pygame.quit()Features 🌟 Lua-Pygame Bindings: Seamlessly integrates Lua scripting capabilities with Pygame’s graphical functions. High-Level Abstractions: Handles events and main game loop through Lua, reducing the need for verbose Python code. Cross-Platform Compatibility: Works across different systems where Python can run. View all the ported and extra implemented methods on the wiki. View all the examples, ported games, demos, and souce code in the /examples directory of the repo.License 📜This project is licensed under the GNU GPL 3.0 License - see the LICENSE file for details. Edit this page’s markdown on github." }, { "title": "Infinity Library - Book Downloader", "url": "/serverboi.org/posts/Infinity-Library/", "categories": "", "tags": "", "date": "2024-02-21 06:30:00 +0000", "snippet": "Infinity Library is a reliable, lightweight and fast desktop client for Library Genisis written in Java. Works on PC, Mac, and Linux. OS Version Details Bundled JRE ...", "content": "Infinity Library is a reliable, lightweight and fast desktop client for Library Genisis written in Java. Works on PC, Mac, and Linux. OS Version Details Bundled JRE v1.1.1 Windows setup ✔️ Temurin v1.1.1 tar.gz / zip ❌ None Using Infinity Library to search for books and mirrorsFeatures 🌟 🔍 Search and download books from libgen.li and library.lol. 📖 Displays the list of mirrors for any given book across annas-archive.org, library.lol or any other libgen.li supported mirror. 🌐 Allows for filtering against any language and/or any media type. 📚 Fetches book details, covers, and direct download URLs across multiple mirrors all in one place. 💾 Directly download from the libgen.li or library.lol mirror to a selected local location. 🚀 Multi-threaded downloading logic allows for downloading more than one book simultaneously without blocking the UI. 🔢 Pagination allows for in-depth searching of results. 🎨 Uses Java Swing (jswing) and Jsoup for graphics and web scraping, respectively.License 📜This project is licensed under the GNU GPL v3.0 License - see the LICENSE file for details. Edit this page’s markdown on github." }, { "title": "Real Art AI - AI art studio", "url": "/serverboi.org/posts/Real-Art-AI/", "categories": "", "tags": "", "date": "2023-05-02 06:30:00 +0000", "snippet": " Real Art AIDescriptionThe Real art AI app allows users to easily create stunning digital art. Using cutting-edge AI users can create personalized illustrations, or upload photos and transform the...", "content": " Real Art AIDescriptionThe Real art AI app allows users to easily create stunning digital art. Using cutting-edge AI users can create personalized illustrations, or upload photos and transform them into completely unique digital art pieces. Real Art AI gives anybody the tools to pull off advanced AI art techniques such as face-morphing, face-swap, background-swap/replace, up-scaling, and image beautification all in one place.Features Txt2img The “Txt2img” tool works by utilizing an algorithm that has been trained on a dataset of images and their corresponding textual descriptions. This allows an AI model to understand the complex relationships between text and images, and to generate new images that accurately reflect a given text prompt. Img2img The “Img2img” tool utilizes an advanced deep learning algorithm that has been trained on a vast dataset of images. This allows the AI model to understand the complex relationships between different images and to generate new images that accurately reflect a given prompt. Upscale Upscaling is a technique used to increase the resolution and improve the quality of an image or video. It works by analyzing the existing pixels in the image or video and using advanced algorithms to create new pixels that fill in the gaps between the existing ones. Denoising strength The denoising strength parameter in img2img is an essential tool that enables users to balance the trade-off between noise reduction and the preservation of image details. By adjusting the denoising strength parameter, users can customize the amount of noise reduction applied to the image, ensuring that the final output meets their specific needs and preferences. Prompt autocomplete The prompt autocomplete feature works by using a GPT-2 like language model that has been trained on a dataset of txt2img prompts. When a user enters a partial description of an image, the model uses its training to generate a complete description that is consistent with the language patterns it has learned. This can save the user time and effort by generating a complete prompt without requiring them to manually enter all the details. AI paintingAI painting is a process where the user selects a specific area in an image, and an algorithm trained on image reconstruction adds finely placed details within that selection. It combines the user’s artistic input with the algorithm’s learning to enhance the artwork with intricate elements. Cross platform supportReal Art AI supports both IOS and Android phones!ReleasesIOS Release txt2img img2img inpaint Prompt Fill outpaint Release Notes 1.0.0 ✅ ✅ ❌ ✅ ❌ - Initial release. 1.1.0 ✅ ✅ ✅ ✅ ❌ - Added support for inpaint feature. Bug and UI fixes. 1.2.0 ✅ ✅ ✅ ✅ ❌ - Merged with Android release 1.3.0. 1.3.0 ✅ ✅ ✅ ✅ ✅ - Merged with Android release 1.5.0 Android Release txt2img img2img inpaint Prompt Fill outpaint Release Notes 1.0.0 ✅ ✅ ❌ ✅ ❌ - Initial release. 1.1.0 ✅ ✅ ❌ ✅ ❌ - Bug and UI fixes. 1.2.0 ✅ ✅ ✅ ✅ ❌ - Added support for inpaint feature. Bug and UI fixes. 1.3.0 ✅ ✅ ✅ ✅ ❌ - UMP added, ad state fixes, and paint canvas fixes. 1.4.0 ✅ ✅ ✅ ✅ ✅ - Added outpaint feature. Fixed lots of bugs. 1.5.0 ✅ ✅ ✅ ✅ ✅ - UI hotfix. Better error 413 handling. Edit this page’s markdown on github." }, { "title": "Discord-notify-bot - Ultimate Discord notfication bot", "url": "/serverboi.org/posts/Discord-notify-bot/", "categories": "", "tags": "", "date": "2023-04-23 06:30:00 +0000", "snippet": "Discord-notify-botOverviewDiscord-notify-bot is a Discord bot that sends notifications at any number of specified times and can also send a message to a text channel when a user joins a specified v...", "content": "Discord-notify-botOverviewDiscord-notify-bot is a Discord bot that sends notifications at any number of specified times and can also send a message to a text channel when a user joins a specified voice channel.Bot setupYou need a bot token and to invite your bot with valid permissions from the discord developer portal. You also need the role name, role ID, vc ID, and tc ID in your server so that the bot knows what to monitor and where / whom to send messages.Installation Clone the repository: git clone https://github.com/JakeTurner616/discord-notify Install the required packages: pip install -r requirements.txt Edit config.ini and fill in all values with the required information. Run the bot: python bot.pyUsageOnce the bot is running, it will automatically send notifications at the specified times to the specified text channel, and will send a DM to everyone given a specified role when a user joins the specified voice channel.LicenseThis project is licensed under the GNU/GPL license - see the LICENSE file for details. Edit this page’s markdown on github." }, { "title": "Load balance Stable Diffusion GPU/CPU Cluster", "url": "/serverboi.org/posts/sd-loadbalance/", "categories": "", "tags": "", "date": "2023-04-01 06:30:00 +0000", "snippet": "sd-loadbalance is a simple nginx configuration to load balance two applications running on localhost:7860 and localhost:7861. The configuration uses the default round-robin load balancing method, w...", "content": "sd-loadbalance is a simple nginx configuration to load balance two applications running on localhost:7860 and localhost:7861. The configuration uses the default round-robin load balancing method, where each server in the upstream group is used in a sequential manner. This config assumes two automatic1111 sd instances exist.Configuration DetailsThe Nginx configuration file contains the following directives: upstream: Defines a group of servers to be load balanced. server: Lists the IP addresses and port numbers of the servers to be included in the group. listen: Specifies the port number and IP address to listen on. location: Defines the URL path to be proxied to the upstream servers. proxy_pass: Specifies the upstream group to be used for load balancing. proxy_set_header: Sets the HTTP headers to be sent to the upstream servers.UsageUse within docker is quite simple. See the example dockerfile.For baremetal simply install nginx and paste the contents of the configuration - restart Nginx.After the configuration is applied, Nginx will load balance incoming requests between the two applications running on localhost:7860 and localhost:7861.Network diagram Config:user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;events { worker_connections 1024;}http { upstream my_app { server localhost:7860; server localhost:7861; } server { listen 80; server_name localhost; location / { proxy_pass http://my_app; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } }} Edit this page’s markdown on github." }, { "title": "reboot-to-uefi - A simple batch / bash file to act as a clone of ASROCK restart to UEFI", "url": "/serverboi.org/posts/reboot-to-uefi/", "categories": "", "tags": "", "date": "2022-10-06 06:30:00 +0000", "snippet": "reboot-to-uefireboot-to-uefi is a simple batch / bash script to act as a clone of ASROCK restart to UEFI, but for non ASROCK motherboards.Usage (Windows):One liner to download and execute (cmd runn...", "content": "reboot-to-uefireboot-to-uefi is a simple batch / bash script to act as a clone of ASROCK restart to UEFI, but for non ASROCK motherboards.Usage (Windows):One liner to download and execute (cmd running as administrator):curl -sS https://raw.githubusercontent.com/JakeTurner616/reboot-to-bios/main/reboot-to-bios.bat &gt; reboot-to-bios.bat &amp;&amp; cmd /C reboot-to-bios.batOr clone/copy contents of reboot-to-bios.bat into a file with a .bat file extension, then run it as administrator.Usage (Most Linux OS’s):One liner to download and execute (privledged shell):wget https://raw.github.com/JakeTurner616/reboot-to-bios/main/reboot-to-bios.sh -O - | bashOr clone/copy contents of reboot-to-bios.sh into a file with a .sh file extension, then run it as a privledged user.Limitations: Script must be ran as privledged user - Will return an error otherwise. Might not work for certian motherboards with fast-boot / ultra-fast-boot on Windows. Might not work with some configurations of Windows fast-startup. Uses systemctl only on Linux as of now - Requires systemd as init system. Future ideas: Update Linux version to detect the active init system being used as to support more distros. Edit this page’s markdown on github." }, { "title": "Fitgirl magnet list", "url": "/serverboi.org/posts/FitGirl-Repack-List/", "categories": "", "tags": "", "date": "2022-10-06 06:30:00 +0000", "snippet": "FitGirl-Magnet-ListA script to isolate magnet links from https://fitgirl-repacks.site/all-my-repacks-a-z/Usagepython magnets.py &gt; out.txtOutputLink: https://fitgirl-repacks.site/chinese-paladin-...", "content": "FitGirl-Magnet-ListA script to isolate magnet links from https://fitgirl-repacks.site/all-my-repacks-a-z/Usagepython magnets.py &gt; out.txtOutputLink: https://fitgirl-repacks.site/chinese-paladin-sword-and-fairy-7/Title: (Chinese Paladin): Sword and Fairy 7 ΓÇô v2.0.1Magnet: magnet:?xt=urn:btih:7C2F38F573260C976F132711CECB60970DCFCC79&amp;dn=Sword+and+Fairy+7+%28v2.0.1%2C+MULTi4%29+%5BFitGirl+Repack%5D&amp;tr=udp%3A%2F%2Fopentor.net%3A6969&amp;tr=udp%3A%2F%2Fopentor.org%3A2710&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&amp;tr=http%3A%2F%2Ftracker.dler.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fipv4.tracker.harry.lu%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fopen.stealth.si%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fretracker.lanta-net.ru%3A2710%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.cyberia.is%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.moeking.me%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.tiny-vps.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.torrent.eu.org%3A451%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&amp;tr=http%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fopentracker.i2p.rocks%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.internetwarriors.net%3A1337%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fcoppersurfer.tk%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.zer0day.to%3A1337%2Fannounce--------------------Link: https://fitgirl-repacks.site/hackg-u-last-recode/Title: .hack//G.U. Last RecodeMagnet: magnet:?xt=urn:btih:864504C72DEDED6E62F9FBEAB00436802D15D0D2--------------------Link: https://fitgirl-repacks.site/100-percent-orange-juice/Title: 100% Orange Juice: All Stars Collection ΓÇô v3.7 + 31 DLCsMagnet: magnet:?xt=urn:btih:B7C892EAECD7E39B769DA7138E5DCE957ACF197C&amp;dn=100%25+Orange+Juice%3A+All+Stars+Collection+%28v3.7+%2B+31+DLCs%2C+MULTi9%29+%5BFitGirl+Repack%5D&amp;tr=udp%3A%2F%2F46.148.18.250%3A2710&amp;tr=udp%3A%2F%2Fopentor.org%3A2710&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&amp;tr=http%3A%2F%2Ftracker.dler.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2F9.rarbg.me%3A2730%2Fannounce&amp;tr=udp%3A%2F%2F9.rarbg.to%3A2770%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.pirateparty.gr%3A6969%2Fannounce&amp;tr=http%3A%2F%2Fretracker.local%2Fannounce&amp;tr=http%3A%2F%2Fretracker.ip.ncnet.ru%2Fannounce&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fipv4.tracker.harry.lu%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fopen.stealth.si%3A80%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.zer0day.to%3A1337%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fcoppersurfer.tk%3A6969%2FannounceSource:import requestsimport sysfrom bs4 import BeautifulSoup# Set the encoding to UTF-8 for printingsys.stdout.reconfigure(encoding=\"utf-8\")# Base URLbase_url = \"https://fitgirl-repacks.site/all-my-repacks-a-z/\"# Iterate over pages 1 to 71for page_num in range(1, 72): # Update the URL with the current page number url = base_url + f\"?lcp_page0={page_num}#lcp_instance_0\" # Send a GET request to the website and retrieve the HTML content response = requests.get(url) html_content = response.text # Create a BeautifulSoup object to parse the HTML soup = BeautifulSoup(html_content, \"html.parser\") # Find the &lt;ul&gt; element with class \"lcp_catlist\" and id \"lcp_instance_0\" ul_element = soup.find(\"ul\", class_=\"lcp_catlist\", id=\"lcp_instance_0\") # Check if the ul_element is None if ul_element is not None: # Iterate over each &lt;li&gt; element within the &lt;ul&gt; element for li_element in ul_element.find_all(\"li\"): # Find the &lt;a&gt; element within the &lt;li&gt; element a_element = li_element.find(\"a\") if a_element: # Extract the href attribute value (link) link = a_element[\"href\"] print(\"Link:\", link) # Extract the text (title) within the &lt;a&gt; element title = a_element.text # Handle encoding errors by replacing problematic characters try: print(\"Title:\", title) except UnicodeEncodeError: print(\"Title:\", title.encode(\"utf-8\", errors=\"replace\").decode()) # Send a GET request to the linked page and retrieve the HTML content linked_page_response = requests.get(link) linked_page_html_content = linked_page_response.text # Create another BeautifulSoup object to parse the linked page's HTML linked_page_soup = BeautifulSoup(linked_page_html_content, \"html.parser\") # Find the &lt;a&gt; element with href starting with \"magnet:\" magnet_link = linked_page_soup.find(\"a\", href=lambda href: href and href.startswith(\"magnet:\")) if magnet_link: # Extract the href attribute value (magnet link) magnet = magnet_link[\"href\"] # Handle encoding errors by replacing problematic characters try: print(\"Magnet:\", magnet) except UnicodeEncodeError: print(\"Magnet:\", magnet.encode(\"utf-8\", errors=\"replace\").decode()) print(\"--------------------\") else: print(f\"Could not find the &lt;ul&gt; element with class 'lcp_catlist' and id 'lcp_instance_0' on page {page_num}\") Edit this page’s markdown on github." }, { "title": "Autowgc.sh - CLI only WireGuard Client for VPN Automation and Integration", "url": "/serverboi.org/posts/Autowgc-sh/", "categories": "", "tags": "", "date": "2022-08-08 06:30:00 +0000", "snippet": "Autowgc.sh is a wireguard client for linux written in bash/shell for automation of wireguard tunnels within a linux system. Allows for simple to advanced virtual networking setups to be created, ca...", "content": "Autowgc.sh is a wireguard client for linux written in bash/shell for automation of wireguard tunnels within a linux system. Allows for simple to advanced virtual networking setups to be created, called and then executed within C, bash, or perl.Download:sudo wget -qO - api.serverboi.org &gt; ~/autowgc.shExecute:sudo bash ~/autowgc.shSyntax:sudo bash ~/autowgc [-h |-a `file` |-s ]Flags:-h Shows command syntax and other info.-a file Add a wireguard client config file or ommit the file to start an already added connection. file Should be the location of a valid wireguard config:sudo ~/autowgc -a /file.conf-s Stop the wireguard VPN easily.Source: #!/bin/bashif (( EUID != 0 )); then echo \"Error: Must be ran as root user\" 1&gt;&amp;2 exit 100fiWG=$(wg)while getopts \":ahs\" option; do case $option in a) ;; h) echo -e \"autowgc (Auto wireguard client) - allows for easy managment of a wireguard connection.\" echo echo \"Syntax: ./autowgc [-h |-a &lt;file&gt;| -s ]\" echo \"options:\" echo \"-a &lt;file&gt; Add a wireguard client config file or ommit the &lt;file&gt; to start an already added connection.\" echo \"-s Stop the wireguard VPN.\" echo \"-h Shows command syntax and other info.\" echo exit;; s) if [ -z \"$WG\" ]thenecho \"Error: nothing to do: no active connection\" &amp;&amp; exitelsesystemctl stop wg-quick@wg0.service &amp;&amp; echo -e \"Stopped!\" &amp;&amp; exit 0fi### ;; \\?) echo \"Error: Invalid or unreconized option\" exit;; esacdoneif [ -z \"$1\" ]then echo \"Error: nothing to do: no flags used\" ; exitelse :fiif [ -z \"$2\" ]then :else cp -r $2 /etc/wireguard/wg0.conf fiCONFIG=/etc/wireguard/wg0.confif [ -f \"$CONFIG\" ]; then :else echo \"Error: $CONFIG does not exist.\" &amp;&amp; exit 0fi###############################echo \"Starting connection!\"###############################os_version=$(lsb_release -r |cut -f2)localnetint=$(ip addr | awk '/state UP/ {print $2}'| tr -d ':' | tail -1)if [ \"$os_version\" = \"18.04\" ]; then add-apt-repository universe 2&gt;/dev/nullelse:fiUFW=$(ufw status verbose)if [ \"$UFW\" = \"Status: active\" ]; then ufw route allow in on wg0 out on $localnetint|head -n 1 ufw route allow in on $localnetint|head -n 1 out on wg0else:fispinner(){ local pid=$! local delay=0.75 local spinstr='|/-\\' while [ \"$(ps a | awk '{print $1}' | grep $pid)\" ]; do local temp=${spinstr#?} printf \" [%c] \" \"$spinstr\" local spinstr=$temp${spinstr%\"$temp\"} sleep $delay printf \"\\b\\b\\b\\b\\b\\b\" done printf \" \\b\\b\\b\\b\"}(apt-get update &gt; /dev/null &amp;&amp; apt-get install openresolv -y &gt; /dev/nulll &amp;&amp; apt-get install wireguard -y &gt; /dev/null &amp;&amp; apt-get upgrade &gt; /dev/null &amp;&amp; wait &amp;&amp; cd /etc/wireguard ; umask 077 &amp;&amp; wg genkey &gt; private-key &amp;&amp; wg pubkey &gt; public-key &lt; private-key) &amp;spinner###systemctl start wg-quick@wg0.service 2&gt;/dev/null if [ $? -eq 0 ]; then echo -e \"Started:$(systemctl status wg-quick@wg0.service | grep SUCCESS | head -1)\" else echo -e \"Error: $(sudo journalctl -xe | grep \"wg-quick@wg0.service has finished with a failure\" | tail -1)\"\tsystemctl status wg-quick@wg0.service | grep \"Main process exited, code=exited, status=1/FAILURE\"fiexit 0Execute within C:#include &lt;stdlib.h&gt;system(\"sudo bash ~/autowgc -a &lt;file&gt;\");Execute within C++:#include &lt;cstdlib&gt;std::system(\"sudo bash ~/autowgc -a &lt;file&gt;\");Execute within C#:public string RunCommandWithBash(sudo bash ~/autowgc){ var psi = new ProcessStartInfo(); psi.FileName = \"/bin/bash\"; psi.Arguments = -a &lt;file&gt;; psi.RedirectStandardOutput = true; psi.UseShellExecute = false; psi.CreateNoWindow = true; using var process = Process.Start(psi); process.WaitForExit(); var output = process.StandardOutput.ReadToEnd(); return output;}// or try out CliWrap https://github.com/Tyrrrz/CliWrap for bash interaction from within C#Execute within Perl:$command=\"ls /\";system($sudo bash autowgc -a &lt;file&gt;); Edit this page’s markdown on github." } ]
